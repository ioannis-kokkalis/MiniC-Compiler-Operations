//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/giann/Desktop/MiniC/MiniC\MiniC.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniCParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface IMiniCVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] MiniCParser.CompileUnitContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementExpression</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementExpression([NotNull] MiniCParser.StatementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementCondition</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementCondition([NotNull] MiniCParser.StatementConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementRepetition</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementRepetition([NotNull] MiniCParser.StatementRepetitionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementBreak</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementBreak([NotNull] MiniCParser.StatementBreakContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementReturn</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementReturn([NotNull] MiniCParser.StatementReturnContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StatementCompound</c>
	/// labeled alternative in <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementCompound([NotNull] MiniCParser.StatementCompoundContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.functionDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDefinition([NotNull] MiniCParser.FunctionDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionMultiplicative</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionMultiplicative([NotNull] MiniCParser.ExpressionMultiplicativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionLogicalComparative</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionLogicalComparative([NotNull] MiniCParser.ExpressionLogicalComparativeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionNUMBER</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionNUMBER([NotNull] MiniCParser.ExpressionNUMBERContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionAdditive</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionAdditive([NotNull] MiniCParser.ExpressionAdditiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionParenthesis</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionParenthesis([NotNull] MiniCParser.ExpressionParenthesisContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionPositive</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionPositive([NotNull] MiniCParser.ExpressionPositiveContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionIDENTIFIER</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionIDENTIFIER([NotNull] MiniCParser.ExpressionIDENTIFIERContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionLogicalOr</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionLogicalOr([NotNull] MiniCParser.ExpressionLogicalOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionLogicalAnd</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionLogicalAnd([NotNull] MiniCParser.ExpressionLogicalAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionLogicalNot</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionLogicalNot([NotNull] MiniCParser.ExpressionLogicalNotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionFunctionCall</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionFunctionCall([NotNull] MiniCParser.ExpressionFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionAssignment</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionAssignment([NotNull] MiniCParser.ExpressionAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionNegative</c>
	/// labeled alternative in <see cref="MiniCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionNegative([NotNull] MiniCParser.ExpressionNegativeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.conditionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionStatement([NotNull] MiniCParser.ConditionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.repetitionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepetitionStatement([NotNull] MiniCParser.RepetitionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CompoundStatementEmpty</c>
	/// labeled alternative in <see cref="MiniCParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundStatementEmpty([NotNull] MiniCParser.CompoundStatementEmptyContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CompoundStatementNotEmpty</c>
	/// labeled alternative in <see cref="MiniCParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundStatementNotEmpty([NotNull] MiniCParser.CompoundStatementNotEmptyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.actualArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitActualArguments([NotNull] MiniCParser.ActualArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.formalArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormalArguments([NotNull] MiniCParser.FormalArgumentsContext context);
}
