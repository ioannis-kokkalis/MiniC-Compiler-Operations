//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/giann/Desktop/MiniC/MiniC\MiniC.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, WHILE=3, BREAK=4, FUNCTION=5, RETURN=6, COMMA=7, SEMICOLON=8, 
		ASSIGNMENT=9, PLUS=10, MINUS=11, MUL=12, DIV=13, NOT=14, OR=15, AND=16, 
		EQUAL=17, NEQUAL=18, GT=19, LT=20, GTE=21, LTE=22, LEFT_PARENTHESIS=23, 
		RIGHT_PARENTHESIS=24, LEFT_CURLY_BRACKET=25, RIGHT_CURLY_BRACKET=26, NUMBER=27, 
		IDENTIFIER=28, WS=29;
	public const int
		RULE_compileUnit = 0, RULE_statement = 1, RULE_functionDefinition = 2, 
		RULE_expression = 3, RULE_conditionStatement = 4, RULE_repetitionStatement = 5, 
		RULE_compoundStatement = 6, RULE_actualArguments = 7, RULE_formalArguments = 8;
	public static readonly string[] ruleNames = {
		"compileUnit", "statement", "functionDefinition", "expression", "conditionStatement", 
		"repetitionStatement", "compoundStatement", "actualArguments", "formalArguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'while'", "'break'", "'function'", "'return'", 
		"','", "';'", "'='", "'+'", "'-'", "'*'", "'/'", "'!'", "'||'", "'&&'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "WHILE", "BREAK", "FUNCTION", "RETURN", "COMMA", "SEMICOLON", 
		"ASSIGNMENT", "PLUS", "MINUS", "MUL", "DIV", "NOT", "OR", "AND", "EQUAL", 
		"NEQUAL", "GT", "LT", "GTE", "LTE", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
		"LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 20;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF:
				case WHILE:
				case BREAK:
				case RETURN:
				case PLUS:
				case MINUS:
				case NOT:
				case LEFT_PARENTHESIS:
				case LEFT_CURLY_BRACKET:
				case NUMBER:
				case IDENTIFIER:
					{
					State = 18;
					statement();
					}
					break;
				case FUNCTION:
					{
					State = 19;
					functionDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << FUNCTION) | (1L << RETURN) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << LEFT_CURLY_BRACKET) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementConditionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionStatementContext conditionStatement() {
			return GetRuleContext<ConditionStatementContext>(0);
		}
		public StatementConditionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementBreakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementBreakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementReturnContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementReturnContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementRepetitionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepetitionStatementContext repetitionStatement() {
			return GetRuleContext<RepetitionStatementContext>(0);
		}
		public StatementRepetitionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRepetition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementCompoundContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public StatementCompoundContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NOT:
			case LEFT_PARENTHESIS:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24;
				expression(0);
				State = 25;
				Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new StatementConditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				conditionStatement();
				}
				break;
			case WHILE:
				_localctx = new StatementRepetitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 28;
				repetitionStatement();
				}
				break;
			case BREAK:
				_localctx = new StatementBreakContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				Match(BREAK);
				State = 30;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new StatementReturnContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 31;
				Match(RETURN);
				State = 32;
				expression(0);
				State = 33;
				Match(SEMICOLON);
				}
				break;
			case LEFT_CURLY_BRACKET:
				_localctx = new StatementCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 35;
				compoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MiniCParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MiniCParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MiniCParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalArgumentsContext formalArguments() {
			return GetRuleContext<FormalArgumentsContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(FUNCTION);
			State = 39;
			Match(IDENTIFIER);
			State = 40;
			Match(LEFT_PARENTHESIS);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 41;
				formalArguments();
				}
			}

			State = 44;
			Match(RIGHT_PARENTHESIS);
			State = 45;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionMultiplicativeContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(MiniCParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCParser.DIV, 0); }
		public ExpressionMultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicalComparativeContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniCParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQUAL() { return GetToken(MiniCParser.NEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(MiniCParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(MiniCParser.LTE, 0); }
		public ExpressionLogicalComparativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogicalComparative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNUMBERContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MiniCParser.NUMBER, 0); }
		public ExpressionNUMBERContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNUMBER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAdditiveContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		public ExpressionAdditiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MiniCParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MiniCParser.RIGHT_PARENTHESIS, 0); }
		public ExpressionParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPositiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionPositiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIDENTIFIERContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCParser.IDENTIFIER, 0); }
		public ExpressionIDENTIFIERContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIDENTIFIER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicalOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MiniCParser.OR, 0); }
		public ExpressionLogicalOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicalAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MiniCParser.AND, 0); }
		public ExpressionLogicalAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicalNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MiniCParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionLogicalNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MiniCParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MiniCParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualArgumentsContext actualArguments() {
			return GetRuleContext<ActualArgumentsContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(MiniCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNegativeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionNegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNegative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new ExpressionNUMBERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 48;
				Match(NUMBER);
				}
				break;
			case 2:
				{
				_localctx = new ExpressionIDENTIFIERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50;
				Match(IDENTIFIER);
				State = 51;
				Match(LEFT_PARENTHESIS);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 52;
					actualArguments();
					}
				}

				State = 55;
				Match(RIGHT_PARENTHESIS);
				}
				break;
			case 4:
				{
				_localctx = new ExpressionParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56;
				Match(LEFT_PARENTHESIS);
				State = 57;
				expression(0);
				State = 58;
				Match(RIGHT_PARENTHESIS);
				}
				break;
			case 5:
				{
				_localctx = new ExpressionLogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60;
				Match(NOT);
				State = 61;
				expression(9);
				}
				break;
			case 6:
				{
				_localctx = new ExpressionPositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62;
				Match(PLUS);
				State = 63;
				expression(3);
				}
				break;
			case 7:
				{
				_localctx = new ExpressionNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64;
				Match(MINUS);
				State = 65;
				expression(2);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 66;
				Match(IDENTIFIER);
				State = 67;
				Match(ASSIGNMENT);
				State = 68;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 86;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionLogicalAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 71;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 72;
						Match(AND);
						State = 73;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionLogicalOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 74;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 75;
						Match(OR);
						State = 76;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionLogicalComparativeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 78;
						((ExpressionLogicalComparativeContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NEQUAL) | (1L << GT) | (1L << LT) | (1L << GTE) | (1L << LTE))) != 0)) ) {
							((ExpressionLogicalComparativeContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 79;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionMultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 80;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 81;
						((ExpressionMultiplicativeContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((ExpressionMultiplicativeContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 82;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionAdditiveContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 84;
						((ExpressionAdditiveContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExpressionAdditiveContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 85;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MiniCParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MiniCParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCParser.ELSE, 0); }
		public ConditionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionStatementContext conditionStatement() {
		ConditionStatementContext _localctx = new ConditionStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_conditionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(IF);
			State = 92;
			Match(LEFT_PARENTHESIS);
			State = 93;
			expression(0);
			State = 94;
			Match(RIGHT_PARENTHESIS);
			State = 95;
			statement();
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 96;
				Match(ELSE);
				State = 97;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PARENTHESIS() { return GetToken(MiniCParser.LEFT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PARENTHESIS() { return GetToken(MiniCParser.RIGHT_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public RepetitionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitionStatementContext repetitionStatement() {
		RepetitionStatementContext _localctx = new RepetitionStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_repetitionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(WHILE);
			State = 101;
			Match(LEFT_PARENTHESIS);
			State = 102;
			expression(0);
			State = 103;
			Match(RIGHT_PARENTHESIS);
			State = 104;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
	 
		public CompoundStatementContext() { }
		public virtual void CopyFrom(CompoundStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompoundStatementNotEmptyContext : CompoundStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(MiniCParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(MiniCParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementNotEmptyContext(CompoundStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatementNotEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundStatementEmptyContext : CompoundStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(MiniCParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(MiniCParser.RIGHT_CURLY_BRACKET, 0); }
		public CompoundStatementEmptyContext(CompoundStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatementEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_compoundStatement);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new CompoundStatementEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(LEFT_CURLY_BRACKET);
				State = 107;
				Match(RIGHT_CURLY_BRACKET);
				}
				break;
			case 2:
				_localctx = new CompoundStatementNotEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(LEFT_CURLY_BRACKET);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 109;
					statement();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << LEFT_CURLY_BRACKET) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0) );
				State = 114;
				Match(RIGHT_CURLY_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public ActualArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualArgumentsContext actualArguments() {
		ActualArgumentsContext _localctx = new ActualArgumentsContext(Context, State);
		EnterRule(_localctx, 14, RULE_actualArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 118;
				expression(0);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 119;
					Match(COMMA);
					}
				}

				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniCParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniCParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCParser.COMMA, i);
		}
		public FormalArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalArgumentsContext formalArguments() {
		FormalArgumentsContext _localctx = new FormalArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_formalArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				Match(IDENTIFIER);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 127;
					Match(COMMA);
					}
				}

				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,135,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,4,0,21,8,0,11,0,12,0,22,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,3,1,37,8,1,1,2,1,2,1,2,1,2,3,2,43,8,2,1,2,1,2,1,
		2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,3,3,70,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,5,3,87,8,3,10,3,12,3,90,9,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,3,4,99,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,4,6,111,8,6,
		11,6,12,6,112,1,6,1,6,3,6,117,8,6,1,7,1,7,3,7,121,8,7,4,7,123,8,7,11,7,
		12,7,124,1,8,1,8,3,8,129,8,8,4,8,131,8,8,11,8,12,8,132,1,8,0,1,6,9,0,2,
		4,6,8,10,12,14,16,0,3,1,0,17,22,1,0,12,13,1,0,10,11,153,0,20,1,0,0,0,2,
		36,1,0,0,0,4,38,1,0,0,0,6,69,1,0,0,0,8,91,1,0,0,0,10,100,1,0,0,0,12,116,
		1,0,0,0,14,122,1,0,0,0,16,130,1,0,0,0,18,21,3,2,1,0,19,21,3,4,2,0,20,18,
		1,0,0,0,20,19,1,0,0,0,21,22,1,0,0,0,22,20,1,0,0,0,22,23,1,0,0,0,23,1,1,
		0,0,0,24,25,3,6,3,0,25,26,5,8,0,0,26,37,1,0,0,0,27,37,3,8,4,0,28,37,3,
		10,5,0,29,30,5,4,0,0,30,37,5,8,0,0,31,32,5,6,0,0,32,33,3,6,3,0,33,34,5,
		8,0,0,34,37,1,0,0,0,35,37,3,12,6,0,36,24,1,0,0,0,36,27,1,0,0,0,36,28,1,
		0,0,0,36,29,1,0,0,0,36,31,1,0,0,0,36,35,1,0,0,0,37,3,1,0,0,0,38,39,5,5,
		0,0,39,40,5,28,0,0,40,42,5,23,0,0,41,43,3,16,8,0,42,41,1,0,0,0,42,43,1,
		0,0,0,43,44,1,0,0,0,44,45,5,24,0,0,45,46,3,12,6,0,46,5,1,0,0,0,47,48,6,
		3,-1,0,48,70,5,27,0,0,49,70,5,28,0,0,50,51,5,28,0,0,51,53,5,23,0,0,52,
		54,3,14,7,0,53,52,1,0,0,0,53,54,1,0,0,0,54,55,1,0,0,0,55,70,5,24,0,0,56,
		57,5,23,0,0,57,58,3,6,3,0,58,59,5,24,0,0,59,70,1,0,0,0,60,61,5,14,0,0,
		61,70,3,6,3,9,62,63,5,10,0,0,63,70,3,6,3,3,64,65,5,11,0,0,65,70,3,6,3,
		2,66,67,5,28,0,0,67,68,5,9,0,0,68,70,3,6,3,1,69,47,1,0,0,0,69,49,1,0,0,
		0,69,50,1,0,0,0,69,56,1,0,0,0,69,60,1,0,0,0,69,62,1,0,0,0,69,64,1,0,0,
		0,69,66,1,0,0,0,70,88,1,0,0,0,71,72,10,8,0,0,72,73,5,16,0,0,73,87,3,6,
		3,9,74,75,10,7,0,0,75,76,5,15,0,0,76,87,3,6,3,8,77,78,10,6,0,0,78,79,7,
		0,0,0,79,87,3,6,3,7,80,81,10,5,0,0,81,82,7,1,0,0,82,87,3,6,3,6,83,84,10,
		4,0,0,84,85,7,2,0,0,85,87,3,6,3,5,86,71,1,0,0,0,86,74,1,0,0,0,86,77,1,
		0,0,0,86,80,1,0,0,0,86,83,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,
		0,0,0,89,7,1,0,0,0,90,88,1,0,0,0,91,92,5,1,0,0,92,93,5,23,0,0,93,94,3,
		6,3,0,94,95,5,24,0,0,95,98,3,2,1,0,96,97,5,2,0,0,97,99,3,2,1,0,98,96,1,
		0,0,0,98,99,1,0,0,0,99,9,1,0,0,0,100,101,5,3,0,0,101,102,5,23,0,0,102,
		103,3,6,3,0,103,104,5,24,0,0,104,105,3,12,6,0,105,11,1,0,0,0,106,107,5,
		25,0,0,107,117,5,26,0,0,108,110,5,25,0,0,109,111,3,2,1,0,110,109,1,0,0,
		0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,
		115,5,26,0,0,115,117,1,0,0,0,116,106,1,0,0,0,116,108,1,0,0,0,117,13,1,
		0,0,0,118,120,3,6,3,0,119,121,5,7,0,0,120,119,1,0,0,0,120,121,1,0,0,0,
		121,123,1,0,0,0,122,118,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,
		1,0,0,0,125,15,1,0,0,0,126,128,5,28,0,0,127,129,5,7,0,0,128,127,1,0,0,
		0,128,129,1,0,0,0,129,131,1,0,0,0,130,126,1,0,0,0,131,132,1,0,0,0,132,
		130,1,0,0,0,132,133,1,0,0,0,133,17,1,0,0,0,15,20,22,36,42,53,69,86,88,
		98,112,116,120,124,128,132
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
