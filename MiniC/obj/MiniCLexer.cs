//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/giann/Desktop/MiniC/MiniC\MiniC.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MiniCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, WHILE=3, BREAK=4, FUNCTION=5, RETURN=6, COMMA=7, SEMICOLON=8, 
		ASSIGNMENT=9, PLUS=10, MINUS=11, MUL=12, DIV=13, NOT=14, OR=15, AND=16, 
		EQUAL=17, NEQUAL=18, GT=19, LT=20, GTE=21, LTE=22, LEFT_PARENTHESIS=23, 
		RIGHT_PARENTHESIS=24, LEFT_CURLY_BRACKET=25, RIGHT_CURLY_BRACKET=26, NUMBER=27, 
		IDENTIFIER=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "ELSE", "WHILE", "BREAK", "FUNCTION", "RETURN", "COMMA", "SEMICOLON", 
		"ASSIGNMENT", "PLUS", "MINUS", "MUL", "DIV", "NOT", "OR", "AND", "EQUAL", 
		"NEQUAL", "GT", "LT", "GTE", "LTE", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
		"LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "NUMBER", "IDENTIFIER", "WS"
	};


	public MiniCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'while'", "'break'", "'function'", "'return'", 
		"','", "';'", "'='", "'+'", "'-'", "'*'", "'/'", "'!'", "'||'", "'&&'", 
		"'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "WHILE", "BREAK", "FUNCTION", "RETURN", "COMMA", "SEMICOLON", 
		"ASSIGNMENT", "PLUS", "MINUS", "MUL", "DIV", "NOT", "OR", "AND", "EQUAL", 
		"NEQUAL", "GT", "LT", "GTE", "LTE", "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", 
		"LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,165,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
		1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
		1,24,1,24,1,25,1,25,1,26,1,26,1,26,5,26,145,8,26,10,26,12,26,148,9,26,
		3,26,150,8,26,1,27,1,27,5,27,154,8,27,10,27,12,27,157,9,27,1,28,4,28,160,
		8,28,11,28,12,28,161,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,5,1,0,49,
		57,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,
		13,32,32,168,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,62,1,0,0,0,5,67,1,0,0,0,7,73,
		1,0,0,0,9,79,1,0,0,0,11,88,1,0,0,0,13,95,1,0,0,0,15,97,1,0,0,0,17,99,1,
		0,0,0,19,101,1,0,0,0,21,103,1,0,0,0,23,105,1,0,0,0,25,107,1,0,0,0,27,109,
		1,0,0,0,29,111,1,0,0,0,31,114,1,0,0,0,33,117,1,0,0,0,35,120,1,0,0,0,37,
		123,1,0,0,0,39,125,1,0,0,0,41,127,1,0,0,0,43,130,1,0,0,0,45,133,1,0,0,
		0,47,135,1,0,0,0,49,137,1,0,0,0,51,139,1,0,0,0,53,149,1,0,0,0,55,151,1,
		0,0,0,57,159,1,0,0,0,59,60,5,105,0,0,60,61,5,102,0,0,61,2,1,0,0,0,62,63,
		5,101,0,0,63,64,5,108,0,0,64,65,5,115,0,0,65,66,5,101,0,0,66,4,1,0,0,0,
		67,68,5,119,0,0,68,69,5,104,0,0,69,70,5,105,0,0,70,71,5,108,0,0,71,72,
		5,101,0,0,72,6,1,0,0,0,73,74,5,98,0,0,74,75,5,114,0,0,75,76,5,101,0,0,
		76,77,5,97,0,0,77,78,5,107,0,0,78,8,1,0,0,0,79,80,5,102,0,0,80,81,5,117,
		0,0,81,82,5,110,0,0,82,83,5,99,0,0,83,84,5,116,0,0,84,85,5,105,0,0,85,
		86,5,111,0,0,86,87,5,110,0,0,87,10,1,0,0,0,88,89,5,114,0,0,89,90,5,101,
		0,0,90,91,5,116,0,0,91,92,5,117,0,0,92,93,5,114,0,0,93,94,5,110,0,0,94,
		12,1,0,0,0,95,96,5,44,0,0,96,14,1,0,0,0,97,98,5,59,0,0,98,16,1,0,0,0,99,
		100,5,61,0,0,100,18,1,0,0,0,101,102,5,43,0,0,102,20,1,0,0,0,103,104,5,
		45,0,0,104,22,1,0,0,0,105,106,5,42,0,0,106,24,1,0,0,0,107,108,5,47,0,0,
		108,26,1,0,0,0,109,110,5,33,0,0,110,28,1,0,0,0,111,112,5,124,0,0,112,113,
		5,124,0,0,113,30,1,0,0,0,114,115,5,38,0,0,115,116,5,38,0,0,116,32,1,0,
		0,0,117,118,5,61,0,0,118,119,5,61,0,0,119,34,1,0,0,0,120,121,5,33,0,0,
		121,122,5,61,0,0,122,36,1,0,0,0,123,124,5,62,0,0,124,38,1,0,0,0,125,126,
		5,60,0,0,126,40,1,0,0,0,127,128,5,62,0,0,128,129,5,61,0,0,129,42,1,0,0,
		0,130,131,5,60,0,0,131,132,5,61,0,0,132,44,1,0,0,0,133,134,5,40,0,0,134,
		46,1,0,0,0,135,136,5,41,0,0,136,48,1,0,0,0,137,138,5,123,0,0,138,50,1,
		0,0,0,139,140,5,125,0,0,140,52,1,0,0,0,141,150,5,48,0,0,142,146,7,0,0,
		0,143,145,7,1,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,
		147,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,149,141,1,0,0,0,149,142,1,
		0,0,0,150,54,1,0,0,0,151,155,7,2,0,0,152,154,7,3,0,0,153,152,1,0,0,0,154,
		157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,56,1,0,0,0,157,155,1,0,
		0,0,158,160,7,4,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,
		162,1,0,0,0,162,163,1,0,0,0,163,164,6,28,0,0,164,58,1,0,0,0,5,0,146,149,
		155,161,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
